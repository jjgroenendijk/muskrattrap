#include "TheThingsNetwork_HANIoT.h"
#include "HAN_IoT_Shield.h"
#include "secrets.h"
#include "encoder.h"
#include "decoder.h"
#include "IOTShieldConfig.h"
#include "knightRider.h"
#include "test.h"
#include "doorSensor.h"
#include "catchSensor.h"
#include "displacementSensor.h"
#include "batterySensor.h"

const char *devEui = DEVEUI;  ///< devEUI to be generated by TTN Console
const char *appEui = JOINEUI; ///< appEUI retrieve from TTN Console application
const char *appKey = APPKEY;  ///< appKEY rtrieve from TTN Console application

#define loraSerial Serial1
#define debugSerial Serial
bool loraCommunication = true;

// Replace REPLACE_ME with TTN_FP_EU868 or TTN_FP_US915
#define freqPlan TTN_FP_EU868

TheThingsNetwork_HANIoT ttn(loraSerial, debugSerial, freqPlan);

// iotShieldTempSensor temperatureSensor;

/// Declare the button objects
doorSensor doorSensor;
catchSensor catchSensor;
displacementSensor displacementSensor;
batterySensor batterySensor;
iotShieldPotmeter potmeter2_test(potmeter2);

void setup()
{
    if (loraCommunication)
    {
        loraSerial.begin(57600);
    }

    debugSerial.begin(9600);

    // Wait a maximum of 10s for Serial Monitor
    while (!debugSerial && millis() < 10000)
        ;

    if (loraCommunication)
    {
        debugSerial.println(F("-- STATUS"));
        ttn.showStatus();

        debugSerial.println(F("-- JOIN"));
        ttn.join(devEui, appEui, appKey);
    }
}

void loop()
{
    ///< Loop indication for debugging
    debugSerial.println("-- LOOP");
    // knightRider();

    ///< Check the red button (door sensor)
    if (redButton.isPressed() && !blackButton.isPressed())
    {
        debugSerial.println(F("-- DOOR CLOSED"));
        doorSensor.setDoorStatus(true);
    }
    else
    {
        doorSensor.setDoorStatus(false);
    }

    ///< Check the black button (catch sensor)
    if (blackButton.isPressed() && !redButton.isPressed())
    {
        debugSerial.println(F("-- CATCH DETECTED"));
        catchSensor.setCatchStatus(true);
    }
    else
    {
        catchSensor.setCatchStatus(false);
    }

    ///< Check the red and black button (displacement sensor)
    if (redButton.isPressed() && blackButton.isPressed())
    {
        debugSerial.println(F("-- TRAP DISPLACEMENT DETECTED"));
        displacementSensor.setDisplacementStatus(true);
    }
    else
    {
        displacementSensor.setDisplacementStatus(false);
    }

    

    ///< Check the battery level


    if (loraCommunication)
    {
        payloadEncoder encoder;

        encoder.setTestValues();

        // Test 1: compose payload
        encoder.composePayload();

        uint8_t *payloadBuffer = encoder.getPayload();
        uint8_t payloadSize = encoder.getPayloadSize();

        // Send it off
        ttn.sendBytes(payloadBuffer, payloadSize);

        // Wait for the message to be sent
        delay(10000);
    }

    delay(500);
}