/*--------------------------------------------------------------------
  This file is part of the HAN IoT shield library.

  This code is free software: Use of this source code is governed by the
  MIT license that can be found in the LICENSE file.
  Original Copyright Â© 2017 The Things Network

  The program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  --------------------------------------------------------------------*/

/*!
 * \file TheThingsNetwork_HANIoT.h
 * \brief Class to utilize RN2483 LoRaWAN radio in HAN IoT Class.
 * This class is an extension of the original class provided by The Things Network,
 * tailored for the HAN IoT Shield and related projects. It facilitates communication
 * with LoRaWAN networks using the Microchip RN2483 or compatible modules.
 * \author Project Contributors
 * \date 2024-03-15
 * \version 1.1
 * 
 * Version|Date        |Note
 * -------|------------|----
 * 1.1    | 15-03-2024 | Added comprehensive Doxygen documentation.
 * 1.0    | 22-02-2019 | Initial version, additions to allow the use of
 *        |            | devEui generated by console of The Things Network.
 */

#ifndef _THETHINGSNETWORK_HAN_IOT_H_
#define _THETHINGSNETWORK_HAN_IOT_H_

#include <Arduino.h>
#include <Stream.h>
#if defined(ARDUINO_ARCH_AVR) || defined(ARDUINO_ARCH_SAMD)
  #include <avr/pgmspace.h>
#else
  #include <pgmspace.h>
#endif

#define TTN_DEFAULT_SF 7          ///< \brief Default Spreading Factor for LoRaWAN communication.
#define TTN_DEFAULT_FSB 2         ///< \brief Default Frequency Sub-Band (used for US915, AU915).
#define TTN_RETX "7"              ///< \brief Default number of retransmissions for confirmed messages.

// Internal comparison results or states
#define CMP_OK 0                  ///< \brief Comparison or operation successful.
#define CMP_ON 1                  ///< \brief State is ON.
#define CMP_OFF 2                 ///< \brief State is OFF.
#define CMP_ACCEPTED 3            ///< \brief Command or join accepted.
#define CMP_MAC_TX_OK 4           ///< \brief MAC transmission successful.
#define CMP_MAC_RX 5              ///< \brief MAC received a message.
#define CMP_RN2483 6              ///< \brief Related to RN2483 module status.

// Default power index values for different frequency plans
#define TTN_PWRIDX_EU868 "1"      ///< \brief Default power index for EU868 plan.
#define TTN_PWRIDX_US915 "5"      ///< \brief Default power index for US915 plan.
#define TTN_PWRIDX_AU915 "5"      ///< \brief Default power index for AU915 plan.
#define TTN_PWRIDX_AS920_923 "1"  ///< \brief Default power index for AS920-923 plan. \todo Verify optimal value.
#define TTN_PWRIDX_AS923_925 "1"  ///< \brief Default power index for AS923-925 plan. \todo Verify optimal value.
#define TTN_PWRIDX_KR920_923 "1"  ///< \brief Default power index for KR920-923 plan. \todo Verify optimal value.
#define TTN_PWRIDX_IN865_867 "1"  ///< \brief Default power index for IN865-867 plan. \todo Verify optimal value.

#define TTN_BUFFER_SIZE 300       ///< \brief Size of the buffer used for modem communication.

// Indices for `showStatus()` data retrieval
#define SHOW_EUI 0                ///< \brief Index for retrieving hardware EUI.
#define SHOW_BATTERY 1            ///< \brief Index for retrieving battery voltage.
#define SHOW_APPEUI 2             ///< \brief Index for retrieving Application EUI.
#define SHOW_DEVEUI 3             ///< \brief Index for retrieving Device EUI.
#define SHOW_BAND 4               ///< \brief Index for retrieving current frequency band.
#define SHOW_DATA_RATE 5          ///< \brief Index for retrieving current data rate.
#define SHOW_RX_DELAY_1 6         ///< \brief Index for retrieving RX1 delay.
#define SHOW_RX_DELAY_2 7         ///< \brief Index for retrieving RX2 delay.
#define SHOW_VERSION 8            ///< \brief Index for retrieving firmware version of the module.
#define SHOW_MODEL 9              ///< \brief Index for retrieving module model.
#define SHOW_DEVADDR 10           ///< \brief Index for retrieving device address.

// Error codes used internally
#define ERR_INVALID_SF 0          ///< \brief Error: Invalid Spreading Factor.
#define ERR_INVALID_FP 1          ///< \brief Error: Invalid Frequency Plan.
#define ERR_UNEXPECTED_RESPONSE 2 ///< \brief Error: Unexpected response from modem.
#define ERR_SEND_COMMAND_FAILED 3 ///< \brief Error: Failed to send command to modem.
#define ERR_JOIN_FAILED 4         ///< \brief Error: Join procedure failed.
#define ERR_JOIN_NOT_ACCEPTED 5   ///< \brief Error: Join request not accepted by network.
#define ERR_PERSONALIZE_NOT_ACCEPTED 6 ///< \brief Error: Personalization (ABP) not accepted.
#define ERR_RESPONSE_IS_NOT_OK 7  ///< \brief Error: Modem response was not "ok".
#define ERR_KEY_LENGTH 8          ///< \brief Error: Invalid key length.
#define ERR_CHECK_CONFIGURATION 9 ///< \brief Error: Problem with configuration.

// Success codes used internally
#define SCS_PERSONALIZE_ACCEPTED 0 ///< \brief Success: Personalization (ABP) accepted.
#define SCS_JOIN_ACCEPTED 1       ///< \brief Success: Join (OTAA) accepted.
#define SCS_SUCCESSFUL_TRANSMISSION 2 ///< \brief Success: Message transmitted successfully.
#define SCS_SUCCESSFUL_TRANSMISSION_RECEIVED 3 ///< \brief Success: Message transmitted and downlink received.

// Radio command prefixes/indices
#define RADIO_PREFIX 0            ///< \brief Prefix for radio commands.
#define RADIO_SET 1               ///< \brief Index for radio set operations.
#define RADIO_GET 2               ///< \brief Index for radio get operations.
#define RADIO_GET_BW 3            ///< \brief Index for getting radio bandwidth.
#define RADIO_GET_PRLEN 4         ///< \brief Index for getting preamble length.
#define RADIO_GET_CRC 5           ///< \brief Index for getting CRC status.
#define RADIO_GET_CR 6            ///< \brief Index for getting coding rate.
#define RADIO_GET_SF 7            ///< \brief Index for getting spreading factor.

// System command prefixes/indices
#define SYS_PREFIX 0              ///< \brief Prefix for system commands.
#define SYS_SLEEP 1               ///< \brief Index for system sleep command.
#define SYS_RESET 2               ///< \brief Index for system reset command.
#define SYS_ERASE_FW 3            ///< \brief Index for system erase firmware command.
#define SYS_FACTORY_RST 4         ///< \brief Index for system factory reset command.
#define SYS_SET 5                 ///< \brief Index for system set operations.
#define SYS_GET 6                 ///< \brief Index for system get operations.
 #define SYS_GET_VER 7           ///< \brief Index for getting system version.
#define SYS_GET_VDD 8             ///< \brief Index for getting system VDD (voltage).
#define SYS_GET_HWEUI 9           ///< \brief Index for getting hardware EUI.
#define SYS_SET_GET_NVM 10        ///< \brief Index for system NVM operations.
#define SYS_SET_PINDIG 11         ///< \brief Index for setting pin digital state.

// MAC command prefixes/indices
#define MAC_PREFIX 0              ///< \brief Prefix for MAC commands.
#define MAC_RESET 1               ///< \brief Index for MAC reset command.
#define MAC_TX 2                  ///< \brief Index for MAC transmit command.
#define MAC_JOIN 3                ///< \brief Index for MAC join command.
#define MAC_SAVE 4                ///< \brief Index for MAC save configuration command.
#define MAC_FORCE_ENABLE 5        ///< \brief Index for MAC force enable command.
#define MAC_PAUSE 6               ///< \brief Index for MAC pause command.
#define MAC_RESUME 7              ///< \brief Index for MAC resume command.
#define MAC_SET 8                 ///< \brief Index for MAC set operations.
#define MAC_GET 9                 ///< \brief Index for MAC get operations.

// MAC command parameter indices (for set/get operations)
#define MAC_DEVADDR 0             ///< \brief Index for Device Address parameter.
#define MAC_DEVEUI 1              ///< \brief Index for Device EUI parameter.
#define MAC_APPEUI 2              ///< \brief Index for Application EUI parameter.
#define MAC_NWKSKEY 3             ///< \brief Index for Network Session Key parameter.
#define MAC_APPSKEY 4             ///< \brief Index for Application Session Key parameter.
#define MAC_APPKEY 5              ///< \brief Index for Application Key parameter.
#define MAC_PWRIDX 6              ///< \brief Index for Power Index parameter.
#define MAC_DR 7                  ///< \brief Index for Data Rate parameter.
#define MAC_ADR 8                 ///< \brief Index for Adaptive Data Rate status parameter.
#define MAC_BAT 9                 ///< \brief Index for Battery Level parameter.
#define MAC_RETX 10               ///< \brief Index for Retransmission count parameter.
#define MAC_LINKCHK 11            ///< \brief Index for Link Check parameter.
#define MAC_RXDELAY1 12           ///< \brief Index for RX1 Delay parameter.
#define MAC_RXDELAY2 13           ///< \brief Index for RX2 Delay parameter.
#define MAC_BAND 14               ///< \brief Index for Frequency Band parameter.
#define MAC_AR 15                 ///< \brief Index for Automatic Reply status parameter.
#define MAC_RX2 16                ///< \brief Index for RX2 window parameters.
#define MAC_CH 17                 ///< \brief Index for Channel parameters.
#define MAC_GWNB 18               ///< \brief Index for Number of Gateways parameter (from link check).
#define MAC_MRGN 19               ///< \brief Index for Margin parameter (from link check).

// MAC join modes
#define MAC_JOIN_MODE_OTAA 0      ///< \brief Join mode: Over-The-Air Activation.
#define MAC_JOIN_MODE_ABP 1       ///< \brief Join mode: Activation By Personalization.

// MAC channel parameters
#define MAC_CHANNEL_DCYCLE 0      ///< \brief Index for Channel Duty Cycle parameter.
#define MAC_CHANNEL_DRRANGE 1     ///< \brief Index for Channel Data Rate Range parameter.
#define MAC_CHANNEL_FREQ 2        ///< \brief Index for Channel Frequency parameter.
#define MAC_CHANNEL_STATUS 3      ///< \brief Index for Channel Status (on/off) parameter.

// MAC transmission types
#define MAC_TX_TYPE_CNF 0         ///< \brief Transmission type: Confirmed message.
#define MAC_TX_TYPE_UCNF 1        ///< \brief Transmission type: Unconfirmed message.

// Table indices for command lookups
#define MAC_TABLE 0               ///< \brief Index for MAC command table.
#define MAC_GET_SET_TABLE 1       ///< \brief Index for MAC get/set parameter table.
#define MAC_JOIN_TABLE 2          ///< \brief Index for MAC join parameter table.
#define MAC_CH_TABLE 3            ///< \brief Index for MAC channel parameter table.
#define MAC_TX_TABLE 4            ///< \brief Index for MAC transmit type table.
#define SYS_TABLE 5               ///< \brief Index for System command table.
#define RADIO_TABLE 6             ///< \brief Index for Radio command table.
#define ERR_MESSAGE 7             ///< \brief Index for Error message table.
#define SUCCESS_MESSAGE 8         ///< \brief Index for Success message table.

typedef uint8_t port_t; ///< \brief Defines the type for LoRaWAN port numbers.

/**
 * @enum ttn_response_t
 * @brief Represents the possible outcomes of modem operations, especially message transmission.
 */
enum ttn_response_t
{
  TTN_ERROR_SEND_COMMAND_FAILED = (-1),   ///< Error: Sending a command to the modem failed.
  TTN_ERROR_UNEXPECTED_RESPONSE = (-10),  ///< Error: Modem response was not what was expected.
  TTN_SUCCESSFUL_TRANSMISSION = 1,        ///< Success: Message was transmitted successfully.
  TTN_SUCCESSFUL_RECEIVE = 2              ///< Success: A downlink message was received.
};

/**
 * @enum ttn_fp_t
 * @brief Defines the supported LoRaWAN frequency plans.
 */
enum ttn_fp_t
{
  TTN_FP_EU868,       ///< Europe 868MHz frequency plan.
  TTN_FP_US915,       ///< United States 915MHz frequency plan.
  TTN_FP_AU915,       ///< Australia 915MHz frequency plan.
  TTN_FP_AS920_923,   ///< Asia 920-923MHz frequency plan.
  TTN_FP_AS923_925,   ///< Asia 923-925MHz frequency plan.
  TTN_FP_KR920_923,   ///< Korea 920-923MHz frequency plan.
  TTN_FP_IN865_867    ///< India 865-867MHz frequency plan.
};

/**
 * @class TheThingsNetwork_HANIoT
 * @brief This class provides an interface to the RN2483 LoRaWAN module,
 * extending the original The Things Network library functionality for the HAN IoT platform.
 * It handles AT command communication with the modem, manages LoRaWAN parameters (like EUIs, Keys, SF, ADR),
 * and provides methods for joining the network (OTAA/ABP) and sending/receiving messages.
 */
class TheThingsNetwork_HANIoT
{
protected:
  Stream *modemStream;        ///< \brief Pointer to the Stream object for modem communication (e.g., SoftwareSerial or HardwareSerial).
  Stream *debugStream;        ///< \brief Pointer to the Stream object for debug output.
  ttn_fp_t fp;                ///< \brief Current frequency plan selected.
  uint8_t sf;                 ///< \brief Current Spreading Factor.
  uint8_t fsb;                ///< \brief Current Frequency Sub-Band (for US915/AU915).
  bool adr;                   ///< \brief Current Adaptive Data Rate (ADR) status.
  char buffer[512];           ///< \brief General purpose buffer for reading modem responses.
  bool baudDetermined = false;///< \brief Flag indicating if modem baud rate has been successfully determined.
  void (*messageCallback)(const uint8_t *payload, size_t size, port_t port); ///< \brief Callback function for handling incoming messages.

  /**
   * @brief Clears the modem read buffer.
   */
  void clearReadBuffer();

  /**
   * @brief Reads a line from the modem stream with a timeout.
   * @param buffer Pointer to the character array to store the line.
   * @param size Maximum size of the buffer.
   * @param attempts Number of attempts to read a line. Defaults to 3.
   * @return Number of bytes read, or 0 on timeout/error.
   */
  size_t readLine(char *buffer, size_t size, uint8_t attempts = 3);

  /**
   * @brief Reads a specific response from the modem based on table lookups.
   * Used internally to parse known modem responses.
   * @param prefixTable Index of the prefix table (e.g., MAC_PREFIX, SYS_PREFIX).
   * @param indexTable Index of the command table within the prefix.
   * @param index Specific command index.
   * @param buffer Buffer to store the response.
   * @param size Size of the buffer.
   * @return Number of bytes read into the buffer.
   */
  size_t readResponse(uint8_t prefixTable, uint8_t indexTable, uint8_t index, char *buffer, size_t size);

  /**
   * @brief Reads a specific response from the modem based on table lookups (simplified).
   * @param table Index of the message table (e.g., ERR_MESSAGE, SUCCESS_MESSAGE).
   * @param index Index of the message within the table.
   * @param buffer Buffer to store the response.
   * @param size Size of the buffer.
   * @return Number of bytes read into the buffer.
   */
  size_t readResponse(uint8_t table, uint8_t index, char *buffer, size_t size);

  /**
   * @brief Prints debug information for an indexed value.
   * @param index The index of the value.
   * @param value Optional string value to print alongside the index.
   */
  void debugPrintIndex(uint8_t index, const char *value = NULL);

  /**
   * @brief Prints a debug message from predefined message tables.
   * @param type Type of message (e.g., ERR_MESSAGE, SUCCESS_MESSAGE).
   * @param index Index of the message.
   * @param value Optional string value to append to the message.
   */
  void debugPrintMessage(uint8_t type, uint8_t index, const char *value = NULL);

  /**
   * @brief Attempts to automatically determine the modem's baud rate.
   */
  void autoBaud();

  /**
   * @brief Configures the modem for the EU868 frequency plan.
   */
  void configureEU868();

  /**
   * @brief Configures the modem for the US915 frequency plan.
   * @param fsb Frequency Sub-Band to use.
   */
  void configureUS915(uint8_t fsb);

  /**
   * @brief Configures the modem for the AU915 frequency plan.
   * @param fsb Frequency Sub-Band to use.
   */
  void configureAU915(uint8_t fsb);

  /**
   * @brief Configures the modem for the AS920-923 frequency plan.
   */
  void configureAS920_923();

  /**
   * @brief Configures the modem for the AS923-925 frequency plan.
   */
  void configureAS923_925();

  /**
   * @brief Configures the modem for the KR920-923 frequency plan.
   */
  void configureKR920_923();

  /**
   * @brief Configures the modem for the IN865-867 frequency plan.
   */
  void configureIN865_867();

  /**
   * @brief Configures specific channels based on the Frequency Sub-Band (FSB).
   * Primarily for US915/AU915 plans.
   * @param fsb The Frequency Sub-Band.
   */
  void configureChannels(uint8_t fsb);

  /**
   * @brief Sets the LoRaWAN Spreading Factor (SF).
   * @param sf The Spreading Factor to set (e.g., 7 for SF7, 12 for SF12).
   * @return True if successful, false otherwise.
   */
  bool setSF(uint8_t sf);

  /**
   * @brief Waits for an "ok" response from the modem.
   * @return True if "ok" is received, false on timeout or other response.
   */
  bool waitForOk();

  /**
   * @brief Sends a command to the modem using predefined tables.
   * @param table Index of the command table (e.g., MAC_TABLE, SYS_TABLE).
   * @param index Index of the command within the table.
   * @param appendSpace Whether to append a space after the command (for parameters).
   * @param print Whether to print the command to the debug stream. Defaults to true.
   */
  void sendCommand(uint8_t table, uint8_t index, bool appendSpace, bool print = true);

  /**
   * @brief Sends a "mac set" command with a specified parameter and value.
   * @param index Index of the MAC parameter to set (e.g., MAC_DEVADDR, MAC_ADR).
   * @param value The value to set for the parameter.
   * @return True if command sent and "ok" received, false otherwise.
   */
  bool sendMacSet(uint8_t index, const char *value);

  /**
   * @brief Sends a "mac set ch" command for a specific channel parameter.
   * @param index Index of the channel parameter to set (e.g., MAC_CHANNEL_FREQ).
   * @param channel The channel number.
   * @param value The value to set.
   * @return True if command sent and "ok" received, false otherwise.
   */
  bool sendChSet(uint8_t index, uint8_t channel, const char *value);

  /**
   * @brief Sends a "mac join" command.
   * @param type Join type (MAC_JOIN_MODE_OTAA or MAC_JOIN_MODE_ABP).
   * @return True if command sent and "ok" received, false otherwise.
   */
  bool sendJoinSet(uint8_t type);

  /**
   * @brief Sends a payload over LoRaWAN.
   * This is a lower-level method used by public transmission functions.
   * @param mode Transmission mode (e.g., MAC_TX_TYPE_CNF for confirmed, MAC_TX_TYPE_UCNF for unconfirmed).
   * @param port The LoRaWAN port number.
   * @param payload Pointer to the byte array payload.
   * @param len Length of the payload.
   * @return True if command sent, false otherwise. (Actual transmission success is checked later).
   */
  bool sendPayload(uint8_t mode, uint8_t port, uint8_t *payload, size_t len);

  /**
   * @brief Sends a "get" command to retrieve a value from the modem.
   * @param table Index of the command table (e.g., MAC_TABLE, SYS_TABLE).
   * @param prefix Index of the prefix within the table (e.g., MAC_GET, SYS_GET).
   * @param index Index of the specific parameter to get.
   */
  void sendGetValue(uint8_t table, uint8_t prefix, uint8_t index);

public:
  bool needsHardReset = false; ///< \brief Flag indicating if the modem might require a hardware reset. Set by certain error conditions.

  /**
   * @brief Constructor for TheThingsNetwork_HANIoT.
   * @param modemStream Reference to the Stream for modem communication.
   * @param debugStream Reference to the Stream for debug output.
   * @param fp The frequency plan to use (e.g., TTN_FP_EU868).
   * @param sf The default Spreading Factor. Defaults to TTN_DEFAULT_SF.
   * @param fsb The default Frequency Sub-Band (for US/AU plans). Defaults to TTN_DEFAULT_FSB.
   */
  TheThingsNetwork_HANIoT(Stream &modemStream, Stream &debugStream, ttn_fp_t fp, uint8_t sf = TTN_DEFAULT_SF, uint8_t fsb = TTN_DEFAULT_FSB);

  /**
   * @brief Performs a software reset of the modem and re-initializes basic LoRaWAN parameters.
   * @param adr Enable or disable Adaptive Data Rate (ADR). Defaults to true (enabled).
   */
  void reset(bool adr = true);

  /**
   * @brief Performs a hardware reset of the modem using a specified reset pin.
   * @param resetPin The Arduino pin connected to the modem's reset line.
   */
  void resetHard(uint8_t resetPin);

  /**
   * @brief Displays various status information from the modem to the debug stream.
   * This includes EUIs, version, configuration, etc.
   */
  void showStatus();

  /**
   * @brief Gets the Hardware EUI (DevEUI from the chip) from the modem.
   * @param buffer Character buffer to store the EUI.
   * @param size Size of the buffer.
   * @return Number of bytes written to the buffer (length of the EUI string).
   */
  size_t getHardwareEui(char *buffer, size_t size);

  /**
   * @brief Gets the Application EUI (AppEUI) currently configured in the modem.
   * @param buffer Character buffer to store the EUI.
   * @param size Size of the buffer.
   * @return Number of bytes written to the buffer (length of the EUI string).
   */
  size_t getAppEui(char *buffer, size_t size);

  /**
   * @brief Gets the current VDD (supply voltage) measured by the modem.
   * @return The voltage in millivolts (mV).
   */
  uint16_t getVDD();

  /**
   * @brief Registers a callback function to be invoked when a downlink message is received.
   * @param cb Pointer to the callback function. The function should take (const uint8_t* payload, size_t size, port_t port).
   */
  void onMessage(void (*cb)(const uint8_t *payload, size_t size, port_t port));

  /**
   * @brief Provisions the device with the Application EUI and Application Key for OTAA.
   * This configures the necessary identifiers on the modem.
   * @param appEui The Application EUI (EUI-64 format, MSB).
   * @param appKey The Application Key (128-bit, MSB).
   * @return True if provisioning commands were accepted, false otherwise.
   */
  bool provision(const char *appEui, const char *appKey);

  /**
   * @brief Provisions the device with the Device EUI, Application EUI, and Application Key for OTAA.
   * This allows overriding the modem's hardware EUI if needed.
   * @param devEui The Device EUI to use (EUI-64 format, MSB).
   * @param appEui The Application EUI (EUI-64 format, MSB).
   * @param appKey The Application Key (128-bit, MSB).
   * @return True if provisioning commands were accepted, false otherwise.
   */
  bool provision(const char *devEui, const char *appEui, const char *appKey);

  /**
   * @brief Attempts to join the LoRaWAN network using OTAA with previously provisioned EUIs and Key.
   * @param appEui The Application EUI.
   * @param appKey The Application Key.
   * @param retries Number of join attempts. Defaults to -1 (infinite).
   * @param retryDelay Delay between join attempts in milliseconds. Defaults to 10000ms.
   * @return True if join is successful and accepted, false otherwise.
   */
  bool join(const char *appEui, const char *appKey, int8_t retries = -1, uint32_t retryDelay = 10000);

  /**
   * @brief Attempts to join the LoRaWAN network using OTAA with a specific Device EUI and previously provisioned AppEUI and AppKey.
   * @param devEui The Device EUI.
   * @param appEui The Application EUI.
   * @param appKey The Application Key.
   * @param retries Number of join attempts. Defaults to -1 (infinite).
   * @param retryDelay Delay between join attempts in milliseconds. Defaults to 10000ms.
   * @return True if join is successful and accepted, false otherwise.
   */
  bool join(const char *devEui, const char *appEui, const char *appKey, int8_t retries = -1, uint32_t retryDelay = 10000);

  /**
   * @brief Attempts to join the LoRaWAN network using OTAA with currently configured EUIs and Key in the modem.
   * Assumes `provision()` or `personalize()` (for ABP, then switching to OTAA) has been called before.
   * @param retries Number of join attempts. Defaults to -1 (infinite).
   * @param retryDelay Delay between join attempts in milliseconds. Defaults to 10000ms.
   * @return True if join is successful and accepted, false otherwise.
   */
  bool join(int8_t retries = -1, uint32_t retryDelay = 10000);

  /**
   * @brief Configures the device for Activation By Personalization (ABP).
   * @param devAddr The Device Address (32-bit, MSB).
   * @param nwkSKey The Network Session Key (128-bit, MSB).
   * @param appSKey The Application Session Key (128-bit, MSB).
   * @return True if personalization commands were accepted, false otherwise.
   */
  bool personalize(const char *devAddr, const char *nwkSKey, const char *appSKey);

  /**
   * @brief Attempts to activate ABP mode with settings currently stored in the modem.
   * Assumes `personalize(devAddr, nwkSKey, appSKey)` was called before to set these values.
   * @return True if personalization is accepted by the modem, false otherwise.
   */
  bool personalize();

  /**
   * @brief Sends a byte payload over LoRaWAN.
   * @param payload Pointer to the byte array to send.
   * @param length Length of the payload in bytes.
   * @param port The LoRaWAN port number (1-223). Defaults to 1.
   * @param confirm True to send a confirmed message (requires ACK), false for unconfirmed. Defaults to false.
   * @param sf Spreading Factor to use for this transmission. If 0, uses the class's current SF. Defaults to 0.
   * @return A `ttn_response_t` value indicating success, failure, or if a downlink message was received.
   */
  ttn_response_t sendBytes(const uint8_t *payload, size_t length, port_t port = 1, bool confirm = false, uint8_t sf = 0);

  /**
   * @brief Sends an empty uplink message, primarily to poll for downlink messages.
   * This is useful when expecting a response from the network server.
   * @param port The LoRaWAN port number. Defaults to 1.
   * @param confirm True to send a confirmed message. Defaults to false.
   * @return A `ttn_response_t` value. `TTN_SUCCESSFUL_RECEIVE` indicates a downlink was received.
   */
  ttn_response_t poll(port_t port = 1, bool confirm = false);

  /**
   * @brief Puts the LoRaWAN modem into sleep mode to conserve power.
   * @param mseconds Duration of sleep in milliseconds.
   */
  void sleep(uint32_t mseconds);

  /**
   * @brief Wakes the LoRaWAN modem from sleep mode.
   * (Note: This typically involves sending a dummy byte to wake the serial interface).
   */
  void wake();

  /**
   * @brief Saves the current LoRaWAN MAC state (configuration) to the modem's non-volatile memory.
   */
  void saveState();

  /**
   * @brief Initiates a LoRaWAN link check procedure.
   * @param seconds The interval in seconds for the link check. (This might be a misinterpretation, usually link check is a single request).
   * \todo Clarify the 'seconds' parameter for linkCheck. Typically, it's a one-time request.
   */
  void linkCheck(uint16_t seconds);

  /**
   * @brief Gets the number of gateways that responded to the last link check request.
   * @return Number of gateways.
   */
  uint8_t getLinkCheckGateways();

  /**
   * @brief Gets the demodulation margin (dB) reported by the gateway in the last link check response.
   * @return Demodulation margin in dB.
   */
  uint8_t getLinkCheckMargin();
};

#endif // _THETHINGSNETWORK_HAN_IOT_H_
