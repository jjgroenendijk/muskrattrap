{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "LoRaWAN Node: Compile (Release)",
      "type": "shell",
      "command": "arduino-cli compile --fqbn arduino:avr:leonardo --build-property \"compiler.cpp.extra_flags=-DENABLE_DEBUG_SERIAL=false\" nodeCode/nodeCode.ino",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "LoRaWAN Node: Compile (Debug)",
      "type": "shell",
      "command": "arduino-cli compile --fqbn arduino:avr:leonardo --build-property \"compiler.cpp.extra_flags=-DENABLE_DEBUG_SERIAL=true\" nodeCode/nodeCode.ino",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "PayloadCoder: Build Executable",
      "type": "shell",
      "command": "make all",
      "options": {
        "cwd": "${workspaceFolder}/payloadCoder"
      },
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": ["$gcc"]
    },
    {
      "label": "PayloadCoder: Run Unit Tests",
      "type": "shell",
      "command": "make launch",
      "options": {
        "cwd": "${workspaceFolder}/payloadCoder"
      },
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "dependsOn": ["PayloadCoder: Build Executable"],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [] // Test output is custom, no standard problem matcher.
    },
    {
      "label": "LoRaWAN Node: Monitor (Auto-detect Port)",
      "type": "shell",
      "command": "arduino-cli monitor -p $(arduino-cli board list | grep 'arduino:avr:leonardo' | head -n 1 | awk '{print $1}') --fqbn arduino:avr:leonardo",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "detail": "Attempts to auto-detect the serial port for an Arduino Leonardo. Works best on macOS/Linux if only one Leonardo is connected."
    },
    {
      "label": "LoRaWAN Node: Flash (Release, Auto-detect Port)",
      "type": "shell",
      "command": "arduino-cli upload -p $(arduino-cli board list | grep 'arduino:avr:leonardo' | head -n 1 | awk '{print $1}') --fqbn arduino:avr:leonardo nodeCode/nodeCode.ino",
      "group": "test",
      "dependsOn": ["LoRaWAN Node: Compile (Release)"],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "detail": "Compiles (Release) and then flashes the nodeCode.ino sketch to an auto-detected Arduino Leonardo."
    },
    {
      "label": "LoRaWAN Node: Flash (Debug, Auto-detect Port)",
      "type": "shell",
      "command": "arduino-cli upload -p $(arduino-cli board list | grep 'arduino:avr:leonardo' | head -n 1 | awk '{print $1}') --fqbn arduino:avr:leonardo nodeCode/nodeCode.ino",
      "group": "test",
      "dependsOn": ["LoRaWAN Node: Compile (Debug)"],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "detail": "Compiles (Debug) and then flashes the nodeCode.ino sketch to an auto-detected Arduino Leonardo."
    },
    {
      "label": "Docs: Generate Doxygen",
      "type": "shell",
      "command": "doxygen Doxyfile",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Server: Start/Update Stack (Docker Compose)",
      "type": "shell",
      "command": "docker-compose up -d --force-recreate",
      "options": {
        "cwd": "${workspaceFolder}/serverSide"
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "detail": "Starts or updates all server-side applications defined in docker-compose.yml, forcing a recreate of containers."
    }
  ]
}
